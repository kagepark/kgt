###################################
# Copyright (c) CEP Research Institude, All rights reserved. Since 2008
# Kage Park
# License : GPL
####################################
pingpong_file()  {
    local  file_path mpi_type kgt_mpi
    file_path=$1
    mpi_type=$2
    kgt_mpi=$3

    [ -n "$file_path" -a -d "$file_path" ] || error_exit "Can not found $file_path"

    cat << EOF > /tmp/pingpong.c
/* Each Process Ping-Pongs With Every Other Process - Done One Pair at a Time
      Parameters:
              1       - Number of Messages to Send (Default = 500)
	      2       - Number of Bytes in Each Message (Default = 8,000,000)
*/
#include <stdio.h>
#include <stdlib.h>
#include "mpi.h"
#include <unistd.h>
#include <time.h>
#include <sys/times.h>

#define TRUE	1
#define FALSE	0

#define MAX_QSC_NAME 64

#ifdef PRE_ALLOC
    static char	buf1[10000000], buf2[10000000];
#endif

int main(int argc, char *argv[])
{
    MPI_Status     status;               /* MPI status                          */
    int            mpierr;               /* MPI function return code            */
    int            rank;                 /* Process rank within MPI_COMM_WORLD  */
    int            nproc;                /* Total number of MPI processes       */
    int            tag0=41;              /* MPI message tag                     */
    int            tag1=42;              /* MPI message tag                     */
//    int            tag2=43;              /* MPI message tag                     */
    int            warmup=0;             /* MPI warmup loops                    */
    char           process_name[MPI_MAX_PROCESSOR_NAME + 1];
    char           partner_name[MPI_MAX_PROCESSOR_NAME + 1];
//    char           qsc_blank[] = {"       "};
    char           qsc_empty[] = {"???????"};
    int            n_bytes = 4194304 * 2, maxBytes;
    int            n_loops = 50, d_loops;
    unsigned char* send_buff;
    unsigned char* recv_buff;
    int		   useClock = TRUE;
    int            i,j,k,count,mismatch;
    double         et1,et2,mbs;
    et1 = 0.0;
    et2 = 0.0;

    /* GET INPUT PARAMETERS: ONLY THE LAST TWO ARE MINE */
    if (argc >= 3) {
	 n_loops = atoi(argv[argc-2]);
         n_bytes = atol(argv[argc-1]);
    }

    maxBytes = 2;
    i = 0;
    while (maxBytes < n_bytes) {
	maxBytes *=2;
	++i;
    }

    n_bytes = maxBytes;
    d_loops = n_loops;
    n_loops *= i;

#ifdef PRE_ALLOC
    if (n_bytes > 10000000) {
	fprintf(stderr, "pingpong only works for sizes <= 10000000\n");
	exit;
    }
    send_buff = &buf1[0];
    recv_buff = &buf2[0];
    //fprintf(stdout,"not using valloc:send_buff=%p recv_buff=%p\n",send_buff,recv_buff);
#else
    send_buff = (unsigned char *) valloc(n_bytes);
    recv_buff = (unsigned char *) valloc(n_bytes);
    //send_buff = (unsigned char *) malloc(n_bytes);
    //recv_buff = (unsigned char *) malloc(n_bytes);
    //fprintf(stdout,"using valloc:send_buff=%p recv_buff=%p\n",send_buff,recv_buff);
#endif

    mpierr = MPI_Init(&argc, &argv);
    if (mpierr != MPI_SUCCESS) {
        fprintf(stderr, "MPI Error %d (MPI_Init)\n",mpierr);
        fflush(stderr);
        MPI_Abort(MPI_COMM_WORLD, -1);
    }

    mpierr = MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    if (mpierr != MPI_SUCCESS || rank < 0) {
        fprintf(stderr, "MPI Error %d (MPI_Comm_rank)\n",mpierr);
        fflush(stderr);
        MPI_Abort(MPI_COMM_WORLD, -1);
    }

    mpierr = MPI_Comm_size(MPI_COMM_WORLD, &nproc);
    if (mpierr != MPI_SUCCESS || nproc < 1 || nproc <= rank) {
        fprintf(stderr, "MPI Error %d (MPI_Comm_size) [%d]\n",mpierr, rank);
        fflush(stderr);
        MPI_Abort(MPI_COMM_WORLD, -1);
    }

    mpierr = MPI_Get_processor_name(process_name, &count);
    if (mpierr != MPI_SUCCESS) {
        fprintf(stderr,"MPI Error %d (MPI_Get_processor_name) [%d]\n", mpierr, rank);
        sprintf(process_name, qsc_empty);
    }

    n_bytes = 8;
    n_bytes = maxBytes;
    n_loops = d_loops;
    while (n_bytes <= maxBytes) {

    for ( i=0; i<n_bytes; i++ ) {
        send_buff[i] = i%128;
    }

    for ( i=0; i < nproc; i++) {
    //i = 0;
	for ( j = i + 1; j < nproc; j++) {
        //for ( j = 0; j < nproc; j++) {
	    //if (j == i)
	    //	continue;
	    if (rank == j) {
	        mpierr = MPI_Send(process_name, MPI_MAX_PROCESSOR_NAME + 1,
		                  MPI_CHAR, i, tag0, MPI_COMM_WORLD);
                if (mpierr != MPI_SUCCESS) {
		    fprintf(stderr,"MPI Error %d (MPI_Recv) %s [%d]\n",
	      			mpierr,process_name,i);
                    fflush(stderr);
                        MPI_Abort(MPI_COMM_WORLD, -1);
		}
                for (k=0; k < n_bytes; k++)
                    recv_buff[k] = 0x80;
	    }
            if ( rank == i ) {
	        mpierr = MPI_Recv(partner_name, MPI_MAX_PROCESSOR_NAME + 1,
			          MPI_BYTE, j, tag0, MPI_COMM_WORLD, &status);
                if (mpierr != MPI_SUCCESS) {
                    fprintf(stderr,"MPI Error %d (MPI_Send) %s [%d]\n",
			    mpierr,process_name,rank);
                    fflush(stderr);
                    MPI_Abort(MPI_COMM_WORLD, -1);
                }
	    }

            MPI_Barrier(MPI_COMM_WORLD);

            for ( k=0; k<n_loops+warmup; k++ ) {
                if ( rank == i ) {
                    if (k == warmup) {
	                if (useClock)
		            et1 = ((float) clock()) / ((float) CLOCKS_PER_SEC);
			else
		       	    et1 = MPI_Wtime();
		    }
                    mpierr = MPI_Send(send_buff, n_bytes, MPI_BYTE, j, tag1,
			               MPI_COMM_WORLD);
                    if (mpierr != MPI_SUCCESS) {
	                fprintf(stderr,"MPI Error %d (MPI_Send) %s [%d]\n",
				            mpierr,process_name,rank);
                        fflush(stderr);
                        MPI_Abort(MPI_COMM_WORLD, -1);
                    }

		    mpierr = MPI_Recv(recv_buff, n_bytes, MPI_BYTE, j,
		                tag1, MPI_COMM_WORLD, &status);
                    if (mpierr != MPI_SUCCESS) {
                        fprintf(stderr,"MPI Error %d (MPI_Recv) %s [%d]\n",
		             mpierr,process_name,i);
                        fflush(stderr);
                        MPI_Abort(MPI_COMM_WORLD, -1);
                    }
                    if (k == n_loops+warmup-1) {
		        if (useClock)
		            et2 = ((float) clock()) / ((float) CLOCKS_PER_SEC);
			else
		       	    et2 = MPI_Wtime();
		    }
	        }
                if ( rank == j ) {
	            mpierr = MPI_Recv(recv_buff, n_bytes, MPI_BYTE, i,
		                   tag1, MPI_COMM_WORLD, &status);
                    if (mpierr != MPI_SUCCESS) {
                        fprintf(stderr,"MPI Error %d (MPI_Recv) %s [%d]\n",
		                 mpierr,process_name,i);
                        fflush(stderr);
                        MPI_Abort(MPI_COMM_WORLD, -1);
                    }

		    mpierr = MPI_Send(recv_buff, n_bytes, MPI_BYTE, i, tag1,
			               MPI_COMM_WORLD);
                    if (mpierr != MPI_SUCCESS) {
		        fprintf(stderr,"MPI Error %d (MPI_Send) %s [%d]\n",
		            mpierr,process_name,rank);
                        fflush(stderr);
                        MPI_Abort(MPI_COMM_WORLD, -1);
                    }
		}
	    }
            if ( rank == i ) {
                if (i == 0 && j == 1)
	            printf("\nn_loops=%d  n_bytes=%d useClock=%d\n",
			n_loops, n_bytes,useClock);

		mbs = ((double)2*n_loops*n_bytes)/(1000000.0*(et2-et1));
                printf("   %s <<=====>> %s        %9.0f MBS    %9.1f Sec.\n",
			            process_name,partner_name,mbs,et2-et1);
                fflush(stdout);
                mismatch = 0;
                for (k=0; k < n_bytes; k++)
                    if ( recv_buff[k] != k%128 ) mismatch++;
                if ( mismatch ) printf("                                                                  WARNING! %d data mismatches rank=%d\n",mismatch,rank);
                    fflush(stdout);
	    }
	}
    }

    n_bytes *= 2;
    n_loops -= d_loops;
    }

    mpierr = MPI_Finalize();
    if (mpierr != MPI_SUCCESS) {
        fprintf(stderr,"MPI Error %d (MPI_Finalize) %s [%d]\n",mpierr,process_name,rank);
        fflush(stderr);
        MPI_Abort(MPI_COMM_WORLD, -1);
    }

    return 0;
}
EOF

  if [ "$kgt_mpi" == "1" ]; then
     env load ${mpi_type} || error_exit "Can't load ${mpi_type} modules. Please check with \'module list\' command"
  fi
  mpicc /tmp/pingpong.c -o ${file_path}/pingpong
  rm -f /tmp/pingpong.c
  [ "$kgt_mpi" == "1" ] && env unload ${mpi_type}
}

pingpong_run() {
    local file_path count hostfile ib_dev ib_port mpi_type
    file_path=$1
    hostfile=$2
    ib_dev=$3
    ib_port=$4
    count=$5
    mpi_type=$6
    kgt_mpi=$7

    [ -n "$file_path" -a -d "$file_path" ] || error_exit "$file_path not found"
    [ -n "$hostfile" -a -f "$hostfile" ] || error_exit "$hostfile not found"
    [ -n "$count" ] || count=$(cat $hostfile| wc -l)
    if [ "$kgt_mpi" == "1" ]; then
       env load ${mpi_type} || error_exit "Can't load ${mpi_type} modules. Please check with \'module list\' command"
    fi
    if [ "$mpi_type" == "mpich" ]; then
       if [ "$ib_dev" == "ib0" -o "$ib_dev" == "ib1" ]; then
          ib_opt="-iface ${ib_dev}" 
       fi
       MPIRUN=mpirun
    elif [ "$mpi_type" == "mvapich" ]; then
       export VIADEV_DEVICE=$ib_dev
       export VIADEV_DEFAULT_PORT=$ib_port
       MPIRUN=mpirun
    elif [ "$mpi_type" == "openmpi" ]; then
       MPIRUN=mpirun
    elif [ "$mpi_type" == "intel" ]; then
       MPIRUN=mpirun
    fi
    cd $file_path
    $MPIRUN -np $count -hostfile $hostfile $ib_opt ./pingpong
    [ "$kgt_mpi" == "1" ] && env unload ${mpi_type}
}

find_ib_bad() {
  local file_path _ib_ping _port_ping hostname mpi_type _threshold
  file_path=$1
  _ib_ping=$2
  _port_ping=$3
  _threshold=$4
  mpi_type=$5
  kgt_mpi=$6
  shift 6
  hostname=( $* )

  if (( ${#hostname[*]} < 3 )); then
    echo "It need more 3 nodes"
    exit
  fi

  if [ "$kgt_mpi" == "1" ]; then
     env load ${mpi_type} || error_exit "Can't load ${mpi_type} modules. Please check with \'module list\' command"
  fi

  if [ "$mpi_type" == "mpich" ]; then
     if [ "$ib_dev" == "ib0" -o "$ib_dev" == "ib1" ]; then
       ib_opt="-iface ${_ib_ping}"
     fi
     MPIRUN=mpirun
  elif [ "$mpi_type" == "mvapich" ]; then
     export VIADEV_DEVICE=$ib_dev
     export VIADEV_DEFAULT_PORT=$ib_port
     MPIRUN=mpirun
  elif [ "$mpi_type" == "openmpi" ]; then
     MPIRUN=mpirun
  elif [ "$mpi_type" == "intel" ]; then
     MPIRUN=mpirun
  fi

  echo
  echo "Total ${#hostname[*]} nodes"
  echo
  ########### do not touch ###############

  cd $file_path

  for hi in $(seq 0 $((${#hostname[*]} - 1)) ); do
   die=0
   if [ 0 -eq $hi ]; then
       $MPIRUN -np 2 -hosts ${hostname[0]},${hostname[$((${#hostname[*]} - 1))]}  ${ib_opt} ./pingpong  >& /tmp/kgt_pingpong.log
       ping=( $(cat /tmp/kgt_pingpong.log | grep "<<=====>>") )
       if [ -n "${ping[3]}" ]; then
           echo "${ping[*]}" | tee -a /tmp/kgt_pingpong.log
           (( ${ping[3]} <= $_threshold )) && echo "${ping[*]}" >> /tmp/kgt_pingpong_bad.log || echo "${ping[*]}" >>  /tmp/kgt_pingpong_good.log
       else
           die=$(($die + 1))
           kill -9 $(echo $(ps -ef |grep "${hostname[0]}" | grep mpispawn | grep -v grep | awk '{print $2}'))
           echo "${hostname[0]} <<=====>> ${hostname[$((${#hostname[*]} - 1))]} : no connection" | tee -a /tmp/kgt_pingpong.log
           echo "${hostname[0]} <<=====>> ${hostname[$((${#hostname[*]} - 1))]} : no connection" >> /tmp/kgt_pingpong_bad.log
       fi
       $MPIRUN -np 2 -hosts ${hostname[0]},${hostname[1]} ${ib_opt}  ./pingpong  >& /tmp/kgt_pingpong.log
       ping=( $(cat /tmp/kgt_pingpong.log | grep "<<=====>>") )
       if [ -n "${ping[3]}" ]; then
           echo "${ping[*]}" | tee -a /tmp/kgt_pingpong.log
           (( ${ping[3]} <= $_threshold )) && echo "${ping[*]}" >>  /tmp/kgt_pingpong_bad.log || echo "${ping[*]}" >> /tmp/kgt_pingpong_good.log
       else
           die=$(($die + 1))
           kill -9 $(echo $(ps -ef |grep "${hostname[0]}" | grep mpispawn | grep -v grep | awk '{print $2}'))
           echo "${hostname[0]} <<=====>> ${hostname[1]} : no connection" | tee -a /tmp/kgt_pingpong.log
           echo "${hostname[0]} <<=====>> ${hostname[1]} : no connection" >> /tmp/kgt_pingpong_bad.log
       fi
   elif [ $((${#hostname[*]} - 1)) -eq $hi ]; then
       $MPIRUN -np 2 -hosts ${hostname[$hi]},${hostname[$(($hi-1))]}  ${ib_opt} ./pingpong  >& /tmp/kgt_pingpong.log
       ping=( $(cat /tmp/kgt_pingpong.log | grep "<<=====>>") )
       if [ -n "${ping[3]}" ]; then
           echo "${ping[*]}" | tee -a /tmp/kgt_pingpong.log
           (( ${ping[3]} <= $_threshold )) && echo "${ping[*]}" >> /tmp/kgt_pingpong_bad.log || echo "${ping[*]}" >> /tmp/kgt_pingpong_good.log
       else
           die=$(($die + 1))
           kill -9 $(echo $(ps -ef |grep "${hostname[$hi]}" | grep mpispawn | grep -v grep | awk '{print $2}'))
           echo "${hostname[$hi]} <<=====>> ${hostname[$(($hi-1))]} : no connection" | tee -a /tmp/kgt_pingpong.log
           echo "${hostname[$hi]} <<=====>> ${hostname[$(($hi-1))]} : no connection" >> /tmp/kgt_pingpong_bad.log
       fi
       $MPIRUN -np 2 -hosts ${hostname[$hi]},${hostname[0]}  ${ib_opt} ./pingpong  >& /tmp/kgt_pingpong.log
       ping=( $(cat /tmp/kgt_pingpong.log | grep "<<=====>>") )
       if [ -n "${ping[3]}" ]; then
           echo "${ping[*]}" | tee -a /tmp/kgt_pingpong.log
           (( ${ping[3]} <= $_threshold )) && echo "${ping[*]}" >> /tmp/kgt_pingpong_bad.log || echo "${ping[*]}" >> /tmp/kgt_pingpong_good.log
       else
           die=$(($die + 1))
           kill -9 $(echo $(ps -ef |grep "${hostname[$hi]}" | grep mpispawn | grep -v grep | awk '{print $2}'))
           echo "${hostname[$hi]} <<=====>> ${hostname[0]} : no connection" | tee -a /tmp/kgt_pingpong.log
           echo "${hostname[$hi]} <<=====>> ${hostname[0]} : no connection" >> /tmp/kgt_pingpong_bad.log
       fi
   else
       $MPIRUN -np 2 -hosts ${hostname[$hi]},${hostname[$(($hi - 1))]} ${ib_opt} ./pingpong  >& /tmp/kgt_pingpong.log
       ping=( $(cat /tmp/kgt_pingpong.log | grep "<<=====>>") )
       if [ -n "${ping[3]}" ]; then
           echo "${ping[*]}" | tee -a /tmp/kgt_pingpong.log
           (( ${ping[3]} <= $_threshold )) && echo "${ping[*]}" >> /tmp/kgt_pingpong_bad.log || echo "${ping[*]}" >> /tmp/kgt_pingpong_good.log
       else
           die=$(($die + 1))
           kill -9 $(echo $(ps -ef |grep "${hostname[$hi]}" | grep mpispawn | grep -v grep | awk '{print $2}'))
           echo "${hostname[$hi]} <<=====>> ${hostname[$(($hi - 1))]} : no connection" | tee -a /tmp/kgt_pingpong.log
           echo "${hostname[$hi]} <<=====>> ${hostname[$(($hi - 1))]} : no connection" >> /tmp/kgt_pingpong_bad.log
       fi
       $MPIRUN -np 2 -hosts ${hostname[$hi]},${hostname[$(($hi + 1))]}  ${ib_opt} ./pingpong  >& /tmp/kgt_pingpong.log
       ping=( $(cat /tmp/kgt_pingpong.log | grep "<<=====>>") )
       if [ -n "${ping[3]}" ]; then
           echo "${ping[*]}" | tee -a $ping_log
           (( ${ping[3]} <= $_threshold )) && echo "${ping[*]}" >> /tmp/kgt_pingpong_bad.log || echo "${ping[*]}" >> /tmp/kgt_pingpong_good.log
       else
           die=$(($die + 1))
           kill -9 $(echo $(ps -ef |grep "${hostname[$hi]}" | grep mpispawn | grep -v grep | awk '{print $2}'))
           echo "${hostname[$hi]} <<=====>> ${hostname[$(($hi - 1))]} : no connection" | tee -a /tmp/kgt_pingpong.log
           echo "${hostname[$hi]} <<=====>> ${hostname[$(($hi - 1))]} : no connection" >> /tmp/kgt_pingpong_bad.log
       fi
   fi
   (( $die == 2 )) && echo "${hostname[$hi]}" >> /tmp/kgt_pingpong_die.log
  done
  [ "$kgt_mpi" == "1" ] && env unload ${mpi_type}
}

_pingpong_help() {
     echo "${FUNCNAME} <-h <hostname> or -g <group name>>  [<option1> ....]"
     echo
     echo "<options>"
     echo "  -s <share dir>       : default /global"
     echo "  -dev <MPI dev name>  : default eth (ib0,mlx4_0,mlx5_0,...)"
     echo "     -p <IB port>      : Default 1"
     echo "  -l <loop#>           : default 1"
     echo "  -u <pingpong unit>   : Testing group unit, default 30 nodes"
     echo "  -find                : Find low speed"
     echo "     -f <filter num>   : Fileter value, default 1100 MBS"
     echo "  -mt <mpi app>        : Select MPI App(mpich,intel,mvapich,openmpi), default mpich"
     echo "     -kgt              : using MPI App of KGT packages (mpich,mvapich)"
     echo
     echo " * Not support mlx4_0,mlx5_0,..."
     echo " * Not support intel mpi, mvapich, openmpi yet"
     echo " * If you run a pingpong with MPI to IB then you can use '-dev ib0' option"
     exit
}

pingpong() {

   share_dir=$(_k_opt -s 1 0 "$@")
   hosts=$(_k_opt -h 1 0 "$@") || hosts=$(_k_opt -g 1 0 "$@")
   ib_dev=$(_k_opt -dev 1 0 "$@")
   ib_port=$(_k_opt -p 1 0 "$@")
   host_count=$(_k_opt -c 1 0 "$@")
   loop_num=$(_k_opt -l 1 0 "$@")
   unit_num=$(_k_opt -u 1 0 "$@")
   mpi_type=$(_k_opt -mt 1 0 "$@")
   _k_opt -kgt 0 0 "$@" >& /dev/null && kgt_mpi=1
   _k_opt -find 0 0 "$@" >& /dev/null && find_ib_bad=1
   if [ ! -n "$hosts" ]; then
      _pingpong_help
   fi

   [ -n "$mpi_type" ] || mpi_type=mpich
   if [ "$kgt_mpi" != "1" ]; then
      [ -n "$(whereis mpicc | awk -F: '{print $2}')" ] || error_exit "mpicc not found, Please install MPI App or load environment(ex: module load mpich)"
      [ -n "$(whereis mpirun | awk -F: '{print $2}')" ] || error_exit "mpirun not found, Please install MPI App or load environment(ex: module load mpich)"
   fi
   host_list=($(_k_make_hostname $@))

   [ -n "$share_dir" ] || share_dir=/global
   #[ -n "$ib_dev" ] || ib_dev=$(basename $(ls -d /sys/class/infiniband/mlx* | head -n1))
   #[ -n "$ib_dev" ] || ib_dev=eth
   #if [ "$ib_dev" == "ib0" ]; then
   #    ib_port=1
   #else
   #    [ -n "$ib_port" ] || ib_port=$(ls /sys/class/infiniband/$ib_dev/ports/ | head -n 1)
   #fi
   hostfile=$share_dir/hostfile
   [ -n "$host_count" ] || host_count=${#host_list[*]}
   [ -n "$loop_num" ] || loop_num=1
   [ -n "$unit_num" ] || unit_num=30
   if [ "$find_ib_bad" == "1" ]; then
      filter_num=$(_k_opt -f 1 0 "$@")
      [ -n "$filter_num" ] || filter_num=1100
   fi

   pingpong_file "$share_dir" "${mpi_type}" "${kgt_mpi}"
   for (( lloop=1 ; lloop <= $loop_num; lloop++)); do
     echo
     echo "** Run pingpong : ${lloop}/${loop_num}"
     if [ "$find_ib_bad" == "1" ]; then
       (( $host_count < 3 )) && error_exit "it need minimum 3 hosts"
       date_str=$(date)
       for fff in kgt_pingpong_bad.log kgt_pingpong_good.log kgt_pingpong_die.log; do
           echo "** Start at $date_str" >> /tmp/$fff
       done
       echo "Filter value : $filter_num MBS" >> /tmp/kgt_pingpong_bad.log
       find_ib_bad "$share_dir" "$ib_dev" "$ib_port" "$filter_num" "${mpi_type}" "${kgt_mpi}" ${host_list[*]} 
     else
       if (( $host_count > $unit_num )); then
         for ((ii=0; ii<$(($((${host_count}/$unit_num))+1)); ii++)); do
           start=$(($ii*$unit_num))
           end=$(($(($ii+1))*$unit_num))
           (($end > ${host_count})) && end=${host_count}
           rm -f $hostfile
           for ((jj=$start; jj<$end; jj++)); do
             echo "${host_list[$jj]}" >> $hostfile
           done
           host_count_cur=$(cat $hostfile|wc -l)
           pingpong_run "$share_dir" "$hostfile" "$ib_dev" "$ib_port" "$host_count_cur" "${mpi_type}" "${kgt_mpi}"
         done
       else
         echo "${host_list[*]}" | sed "s/ /\n/g" > $hostfile
         pingpong_run "$share_dir" "$hostfile" "$ib_dev" "$ib_port" "$host_count" "${mpi_type}" "${kgt_mpi}"
       fi
     fi
   done
   [ -f ${share_dir}/pingpong ] && rm -f ${share_dir}/pingpong
}
