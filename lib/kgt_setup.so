###################################
# Copyright (c) CEP Research Institude, All rights reserved. Since 2008
# Kage Park
# License : GPL
####################################
org_path=$(pwd)
find_rpm() {
    rpm -qa --qf "%{NAME}\n" |grep "^${1}$" >& /dev/null && return 0 || return 1
}

pre_req() {
   yum install -y  python python-libs python-devel libxml2-python smartmontools dmidecode hdparm pciutils wget libaio-devel libaio tcl tcl-devel sg3_utils gcc gcc-gfortran libgfortran cpp gcc-c++ libgcc libquadmath libquadmath-devel libstdc++ libstdc++-devel screen 

#   for ii in gnuplot liberation-sans-fonts liberation-mono-fonts liberation-fonts-common liberation-serif-fonts; do
#      if ! find_rpm $ii; then
#        yum install -y $ii || echo "Not found $ii"
#      fi
#   done
#   [ -L /usr/share/fonts/truetype ] || ln -s /usr/share/fonts /usr/share/fonts/truetype
}

build_pip() {
   if [ ! -n "$(whereis pip | awk -F: '{print $2}')" ]; then
     if curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py" ; then
        python get-pip.py
     else
        easy_install pip
     fi
   fi
}

build_pip_modules() {
  for ii in $*; do
     if [ "$ii" == "cx_Freeze" ]; then
       pip list --format=legacy | grep -i "^cx-Freeze " >& /dev/null || pip install $ii
     else
       pip list --format=legacy | grep -i "^$ii " >& /dev/null || pip install $ii
     fi
  done
}

_extract() {
   file=$1
   dest=$2
   [ -f "$file" ] || return 1
   if [ -n "$dest" ]; then
      dest_dir=$dest
   else
      dest_dir=/tmp/kgt
      [ -d $dest ] && rm -fr $dest_dir
   fi
   mkdir -p $dest_dir
   ext=($(echo $file | sed "s/\./ /g"))
   if [ "${ext[$((${#ext[*]}-1))]}" == "bz2" ]; then
       tar_opt=jxvf
   elif [ "${ext[$((${#ext[*]}-1))]}" == "gz" ]; then
       tar_opt=zxvf
   elif [ "${ext[$((${#ext[*]}-1))]}" == "xz" ]; then
       tar_opt=Jxvf
   else
       echo "Unknown option"
       exit 1
   fi 
   tar $tar_opt $file -C $dest_dir  > /tmp/kgt.extract.log 2>&1 || return 1
   [ -n "$dest" ] || (cd $dest_dir/* && echo $(pwd) )
}

build_module() {
   local share_dir
   share_dir=$1
   if src_dir=$(_extract $_KGT_HOME/share/modules-4.1.0.tar.bz2); then
       cd $src_dir
       ./configure --prefix=$share_dir/modules
       make
       make install
       cd $org_path
       rm -fr /tmp/kgt
       mkdir -p $_KGT_HOME/modules
   else
       echo "module file not found"
   fi
}

build_fio() {
   local share_dir
   share_dir=$1
   if src_dir=$(_extract $_KGT_HOME/share/modules-4.1.0.tar.bz2); then
       cd $src_dir
       ./configure --prefix=$share_dir/fio
       make
       make install
       cd $org_path
       rm -fr /tmp/kgt
       if [ -d $_KGT_HOME/modules ]; then
       cat << EOF > $_KGT_HOME/modules/fio
#%Module 1.0
#
#  FIO
#
#conflict               mpi
prepend-path            PATH            $share_dir/fio/bin
prepend-path            MANPATH         $share_dir/fio/man
EOF
      fi
   else
       echo "fio file not found"
   fi
}

build_iozone() {
   local share_dir
   share_dir=$1
   if src_dir=$(_extract $_KGT_HOME/share/iozone3_471.tar.bz2); then
       cd $src_dir/src/current
       make linux
       mkdir -p $share_dir/iozone
       cp -a iozone fileop pit_server Gnuplot.txt iozone_visualizer.pl report.pl gnu3d.dem gengnuplot.sh Generate_Graphs *.dem $share_dir/iozone
       cd $org_path
       rm -fr /tmp/kgt

       if [ -d $_KGT_HOME/modules ]; then
       cat << EOF > $_KGT_HOME/modules/iozone
#%Module 1.0
#
#  IOZONE
#
#conflict               mpi
prepend-path            IOZONE_HOME     $share_dir/iozone
prepend-path            PATH            $share_dir/iozone
EOF
       fi
   else
       echo "iozone file not found"
   fi
}


build_blas() {
   local share_dir
   share_dir=$1
   if src_dir=$(_extract $_KGT_HOME/share/blas-3.8.0.tar.bz2); then
       cd $src_dir
       make
       mkdir -p $share_dir/blas
       cp -a *.a *.so $share_dir/blas 2>/dev/null
       (cd $share_dir/blas && ln -s blas_LINUX.a libblas.a)
       cd $org_path
       rm -fr /tmp/kgt
       if [ -d $_KGT_HOME/modules ]; then
       cat << EOF > $_KGT_HOME/modules/blas
#%Module 1.0
#
#  Blas
#
#conflict               mpi
prepend-path            BLAS_HOME       $share_dir/blas
prepend-path            LD_LIBRARY_PATH $share_dir/blas
EOF
       fi
   else
       echo "blas file not found"
   fi
}

build_hpl() {
   local share_dir
   share_dir=$1
   env_file=$2
   if src_dir=$(_extract $_KGT_HOME/share/hpl-2.2.tar.bz2); then
       cd $src_dir
       if [ -d $_KGT_HOME/modules ]; then
       _k_env load ${env_file}
       _k_env load blas
       fi
#       export BLAS_HOME=$share_dir/blas
       cp -a $_KGT_HOME/share/Make.${env_file}_gcc.hpl Make.${env_file}_gcc
       sed -i "/^TOPdir/c\
TOPdir       = $src_dir" Make.${env_file}_gcc
       make arch=${env_file}_gcc
       mkdir -p $share_dir/hpl
       cp -a bin/${env_file}_gcc $share_dir/hpl
       mv $share_dir/hpl/${env_file}_gcc/HPL.dat $share_dir/hpl/${env_file}_gcc/HPL.dat.orig
       cat << EOF > $share_dir/hpl/${env_file}_gcc/HPL.dat
HPLinpack benchmark input file
Innovative Computing Laboratory, University of Tennessee
HPL.out      output file name (if any)
6            device out (6=stdout,7=stderr,file)
3            # of problems sizes (N)
17400 20000 25000     Ns
10            # of NBs
60 80 100 120 140 160 180 200 320 640         NBs
0            PMAP process mapping (0=Row-,1=Column-major)
7            # of process grids (P x Q)
 4  6  8 24 32 24   Ps
24 32 24  8  6  4    Qs
16.0         threshold
1            # of panel fact
2            PFACTs (0=left, 1=Crout, 2=Right)
1            # of recursive stopping criterium
4            NBMINs (>= 1)
1            # of panels in recursion
2            NDIVs
1            # of recursive panel fact.
1            RFACTs (0=left, 1=Crout, 2=Right)
1            # of broadcast
1            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)
1            # of lookahead depth
1            DEPTHs (>=0)
2            SWAP (0=bin-exch,1=long,2=mix)
64           swapping threshold
0            L1 in (0=transposed,1=no-transposed) form
0            U  in (0=transposed,1=no-transposed) form
1            Equilibration (0=no,1=yes)
8            memory alignment in double (> 0)
EOF
       echo "time mpirun -np [count] -hosts  [hostname1,hostname2,..] -iface ib0 ./xhpl" > $share_dir/hpl/${env_file}_gcc/run.sh
       cd $org_path
       rm -fr /tmp/kgt
       if [ -d $_KGT_HOME/modules ]; then
       _k_env unload ${env_file}
       _k_env unload blas
       cat << EOF > $_KGT_HOME/modules/hpl
#%Module 1.0
#
#  HPL
#
#conflict               hpl
prepend-path            HPL_HOME       $share_dir/hpl
EOF
       fi
   else
       echo "hpl file not found"
   fi
}


build_memtest() {
   local share_dir
   share_dir=$1
   if src_dir=$(_extract $_KGT_HOME/share/memtester-4.2.2.tar.gz); then
      cd $src_dir
      make
      mkdir -p $share_dir/memtest
      cp -a memtester $share_dir/memtest
      cd $org_path
      rm -fr /tmp/kgt
   fi
}

build_mpich() {
   local share_dir
   share_dir=$1
   if src_dir=$(_extract $_KGT_HOME/share/mpich-3.2.1.tar.bz2); then
       cd $src_dir
       ./configure --prefix=$share_dir/mpich --disable-fast MPICHLIB_CFLAGS=-O3 MPICHLIB_FFLAGS=-O3 MPICHLIB_CXXFLAGS=-O3 MPICHLIB_FCFLAGS=-O3
       make -j 4
       make install
       cd $org_path
       rm -fr /tmp/kgt
       if [ -d $_KGT_HOME/modules ]; then
       cat << EOF > $_KGT_HOME/modules/mpich
#%Module 1.0
#
#  MPICH module for use with 'environment-modules' package:
#
conflict                mpi
conflict                mvapich
prepend-path            PATH            $share_dir/mpich/bin
prepend-path            LD_LIBRARY_PATH $share_dir/mpich/lib
prepend-path            MANPATH         $share_dir/mpich/man
prepend-path            PKG_CONFIG_PATH $share_dir/mpich/lib/pkgconfig
setenv                  MPI_BIN         $share_dir/mpich/bin
#setenv                  MPI_FORTRAN_MOD_DIR     /usr/lib64/gfortran/modules/mpich-x86_64
setenv                  MPI_INCLUDE     $share_dir/mpich/include
setenv                  MPI_LIB         $share_dir/mpich/lib
setenv                  MPI_MAN         $share_dir/mpich/man
#setenv                  MPI_PYTHON_SITEARCH     /usr/lib64/python2.7/site-packages/mpich
#setenv                  MPI_COMPILER    mpich-x86_64
setenv                  MPI_HOME        $share_dir/mpich
EOF
       fi
   else
       echo "mpich file not found"
   fi
}

build_mvapich() {
   local share_dir
   share_dir=$1
   if src_dir=$(_extract $_KGT_HOME/share/mvapich2-2.2.tar.bz2); then
       cd $src_dir
       ./configure --prefix=$share_dir/mvapich
       make -j 4
       make install
       cd $org_path
       rm -fr /tmp/kgt

       if [ -d $_KGT_HOME/modules ]; then
       cat << EOF > $_KGT_HOME/modules/mvapich
#%Module 1.0
#
#  MVAPICH module for use with 'environment-modules' package:
#
conflict                mpi
conflict                mpich
prepend-path            PATH            $share_dir/mvapich/bin
prepend-path            LD_LIBRARY_PATH $share_dir/mvapich/lib
prepend-path            MANPATH         $share_dir/mvapich/man
prepend-path            PKG_CONFIG_PATH $share_dir/mvapich/lib/pkgconfig
setenv                  MPI_BIN         $share_dir/mvapich/bin
setenv                  MPI_INCLUDE     $share_dir/mvapich/include
setenv                  MPI_LIB         $share_dir/mvapich/lib
setenv                  MPI_MAN         $share_dir/mvapich/man
setenv                  MPI_HOME        $share_dir/mvapich
EOF
       fi
   else
       echo "mvapich file not found"
   fi
}

build_stress() {
   local share_dir
   share_dir=$1
   if src_dir=$(_extract $_KGT_HOME/share/stress-1.0.4.tar.bz2); then
       cd $src_dir
       ./configure --prefix=$share_dir/stress
       make
       make install
       cd $org_path
       rm -fr /tmp/kgt

       if [ -d $_KGT_HOME/modules ]; then
       cat << EOF > $_KGT_HOME/modules/stress
#%Module 1.0
#
#  Stress
#
prepend-path            PATH            $share_dir/stress
EOF
       fi
   else
       echo "stress file not found"
   fi
}

build_stress_ng() {
   local share_dir
   share_dir=$1
   if src_dir=$(_extract $_KGT_HOME/share/stress-ng-0.09.15.tar.xz); then
       cd $src_dir
       make
       mkdir -p $share_dir/stress_ng
       cp -a stress-ng $share_dir/stress_ng
       cd $org_path
       rm -fr /tmp/kgt

       if [ -d $_KGT_HOME/modules ]; then
       cat << EOF > $_KGT_HOME/modules/stress_ng
#%Module 1.0
#
#  Stress-ng
#
prepend-path            PATH            $share_dir/stress_ng
EOF
       fi
   else
       echo "stress-ng file not found"
   fi
}

build_ctcs() {
   local share_dir
   share_dir=$1
   if src_dir=$(_extract $_KGT_HOME/share/ctcs-1.3.1_03.tar.gz $share_dir); then
       echo
   fi
}

build_ansible() {
   yum -y install git build-essential python2 python2-devel libpng-devel SDL2_mixer-devel zlib-devel SDL2-devel ascii asciidoc python-jinja2 python-paramiko python2-cryptography sshpass python-setuptools python-setuptools-devel PyYAML
   pip install jinja2
   [ -d /tmp/kgt ] && rm -fr /tmp/kgt
   mkdir -p /tmp/kgt
   cd /tmp/kgt
   git clone https://github.com/ansible/ansible.git
   cd ansible
   make rpm | tee /tmp/kgt/ansible.log
   ansiblerpm=$(tail -n2 /tmp/kgt/ansible.log | head -n1)
   rpm -ihv $ansiblerpm
   cd $org_path
   rm -fr /tmp/kgt
   if [ -f /etc/ansible/hosts ]; then
      if ! grep "127.0.0.1" /etc/ansible/hosts >& /dev/null; then
         echo "[local]" > /etc/ansible/hosts
         echo "127.0.0.1"  >> /etc/ansible/hosts
      fi
   else
      echo "[local]" > /etc/ansible/hosts
      echo "127.0.0.1"  >> /etc/ansible/hosts
   fi
   ansible all -m ping
   ansible all -m ping -u root
}

build_pingpong() {
   local share_dir
   share_dir=$1
   mkdir -p $share_dir/pingpong
   cd $share_dir/pingpong
   cat << EOF > $share_dir/pingpong/pingpong.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include <mpi.h>

#define MAX_SIZE   262144
#define NUM_ROUNDS 1000

int main(int argc, char **argv) {
  int        me, nproc;
  int        msg_length, round, i;
  double     t_start, t_stop;
  u_int8_t  *snd_buf;  // Send buffer (byte array)
  u_int8_t  *rcv_buf;  // Receive buffer (byte array)
  MPI_Win    window;

  MPI_Init(&argc, &argv);

  MPI_Comm_rank(MPI_COMM_WORLD, &me);
  MPI_Comm_size(MPI_COMM_WORLD, &nproc);

  if (nproc != 2) {
    if (me == 0) printf("This benchmark should be run on exactly two processes");
    MPI_Abort(MPI_COMM_WORLD, 1);
  }

  if (me == 0)
    printf("MPI-2 passive ping-pong latency test, performing %d rounds at each xfer size.\n\n", NUM_ROUNDS);

  MPI_Alloc_mem(MAX_SIZE, MPI_INFO_NULL, &rcv_buf);
  MPI_Alloc_mem(MAX_SIZE, MPI_INFO_NULL, &snd_buf);

  MPI_Win_create(rcv_buf, MAX_SIZE, 1, MPI_INFO_NULL, MPI_COMM_WORLD, &window);

  for (i = 0; i < MAX_SIZE; i++) {
    snd_buf[i] = 1;
  }

  for (msg_length = 1; msg_length <= MAX_SIZE; msg_length *= 2) {
    MPI_Barrier(MPI_COMM_WORLD);
    t_start = MPI_Wtime();

    // Perform NUM_ROUNDS ping-pongs
    for (round = 0; round < NUM_ROUNDS*2; round++) {

      // I am the sender
      if (round % 2 == me) {
        // Clear start and end markers for next round
        MPI_Win_lock(MPI_LOCK_EXCLUSIVE, me, 0, window);
        rcv_buf[0] = 0;
        rcv_buf[msg_length-1] = 0;
        MPI_Win_unlock(me, window);

        MPI_Win_lock(MPI_LOCK_EXCLUSIVE, (me+1)%2, 0, window);
        MPI_Put(snd_buf, msg_length, MPI_BYTE, (me+1)%2, 0, msg_length, MPI_BYTE, window);
        MPI_Win_unlock((me+1)%2, window);
      }

      // I am the receiver: Poll start and end markers
      else {
        u_int8_t val;

        do {
          //MPI_Iprobe(0, 0, MPI_COMM_WORLD, &val, MPI_STATUS_IGNORE);
          MPI_Win_lock(MPI_LOCK_EXCLUSIVE, me, 0, window);
          val = ((volatile u_int8_t*)rcv_buf)[0];
          MPI_Win_unlock(me, window);
        } while (val == 0);

        do {
          //MPI_Iprobe(0, 0, MPI_COMM_WORLD, &val, MPI_STATUS_IGNORE);
          MPI_Win_lock(MPI_LOCK_EXCLUSIVE, me, 0, window);
          val = ((volatile u_int8_t*)rcv_buf)[msg_length-1];
          MPI_Win_unlock(me, window);
        } while (val == 0);
      }
    }

    MPI_Barrier(MPI_COMM_WORLD);
    t_stop = MPI_Wtime();

    if (me == 0)
      printf("%8d bytes \t %12.8f us\n", msg_length, (t_stop-t_start)/NUM_ROUNDS*1.0e6);
  }

  MPI_Win_free(&window);
  MPI_Free_mem(snd_buf);
  MPI_Free_mem(rcv_buf);

  MPI_Finalize();

  return 0;
}
EOF
   cat << EOF > $share_dir/pingpong/pingpong.q
#!/bin/bash 
#SBATCH --partition=test.q             # define running queue name
#SBATCH --job-name=pingpong                # Job name
# #SBATCH -t <time>                            # Define running time 
#SBATCH -N 5                                 # Find available host number per node
# #SBATCH -n #                                 # Find available host number per core
# #SBATCH --ntasks-per-node=8                  # take per node
# #SBATCH --mem=20GB                           # Memory define
# #SBATCH --constraint=IB                      # MPI jobs should request nodes that have InfiniBand
# #SBATCH -w, --nodelist=cpn-f16-35,cpn-f16-37 # Requesting Specific Nodes
# #SBATCH --exclude=cpn-f16-35,cpn-f16-37      # Excluding Specific Nodes
#SBATCH --output=pingpong.%j.out            # Output file
#SBATCH --error=pingpong.%j.err             # Error output file
#
#
module load mpich
srun --nodes=${SLURM_NNODES} bash -c 'hostname -s ' | sort -u> /tmp/slurm.node # get uniq hostnames
mpirun -np $(cat /tmp/slurm.node | wc -l) -machinefile=/tmp/slurm.node ./pingpong
EOF

   _k_env load mpich
   mpicc pingpong.c -o pingpong
   cd $org_path
}

setup() {
    _k_root
    sed -i "/^_KGT_VERSION=/c \
_KGT_VERSION=$(git describe --tags)" $_KGT_HOME/bin/kgt
    share_dir_base=$(_k_opt -s 1 0 "$@")
    [ -n "$share_dir_base" ] || share_dir_base=/global
    echo "_KGT_HOME=$_KGT_HOME
PATH=\${PATH}:\$_KGT_HOME/bin
export PATH _KGT_HOME" > /etc/profile.d/kgt.sh
    source /etc/profile.d/kgt.sh
    share_dir=$share_dir_base/kgt
    [ -d $share_dir ] || mkdir -p $share_dir
    pre_req 
    build_pip
    build_pip_modules cx_Freeze
    [ -d $share_dir/modules ] || build_module $share_dir
    [ -d $share_dir/fio ] || build_fio $share_dir
    [ -d $share_dir/mpich ] || build_mpich $share_dir
    [ -d $share_dir/mvapich ] || build_mvapich $share_dir
    [ -d $share_dir/blas ] || build_blas $share_dir
    [ -d $share_dir/hpl/mpich_gcc ] || build_hpl $share_dir mpich
    [ -d $share_dir/hpl/mvapich_gcc ] || build_hpl $share_dir mvapich
    [ -d $share_dir/stress ] || build_stress $share_dir
    [ -d $share_dir/stress_ng ] || build_stress_ng $share_dir
    [ -d $share_dir/iozone ] || build_iozone $share_dir
    [ -d $share_dir/ctcs ] || build_ctcs $share_dir
    [ -d $share_dir/memtest ] || build_memtest $share_dir
    [ -d $share_dir/pingpong ] || build_pingpong $share_dir
    # build_ansible 
    echo "Please run \"source /etc/profile.d/kgt.sh\""
    echo "Build and setup done"
}
