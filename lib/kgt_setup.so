###################################
# Copyright (c) CEP Research Institude, All rights reserved. Since 2008
# Kage Park
# License : GPL
####################################
find_rpm() {
    rpm -qa --qf "%{NAME}\n" |grep "^${1}$" >& /dev/null && return 0 || return 1
}

pre_req() {
   yum install -y  python python-libs python-devel libxml2-python smartmontools dmidecode hdparm pciutils wget libaio-devel libaio tcl tcl-devel sg3_utils gcc gcc-gfortran libgfortran cpp gcc-c++ libgcc libgomp libquadmath libquadmath-devel libstdc++ libstdc++-devel

#   for ii in gnuplot liberation-sans-fonts liberation-mono-fonts liberation-fonts-common liberation-serif-fonts; do
#      if ! find_rpm $ii; then
#        yum install -y $ii || echo "Not found $ii"
#      fi
#   done
#   [ -L /usr/share/fonts/truetype ] || ln -s /usr/share/fonts /usr/share/fonts/truetype
}

build_pip() {
   if [ ! -n "$(whereis pip | awk -F: '{print $2}')" ]; then
     curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"
     python get-pip.py
   fi
}

build_pip_modules() {
  for ii in $*; do
     if [ "$ii" == "cx_Freeze" ]; then
       pip list --format=legacy | grep -i "^cx-Freeze " >& /dev/null || pip install $ii
     else
       pip list --format=legacy | grep -i "^$ii " >& /dev/null || pip install $ii
     fi
  done
}

build_module() {
   local share_dir
   share_dir=$1
   if [ -f "$_KGT_HOME/share/modules-4.1.0.tar.bz2" ]; then
       tar jxvf $_KGT_HOME/share/modules-4.1.0.tar.bz2 -C /tmp
       cd /tmp/modules-4.1.0
       ./configure --prefix=$share_dir/modules
       make
       make install
       cd -
       rm -fr /tmp/modules-4.1.0
   fi
}

build_fio() {
   local share_dir
   share_dir=$1
   if [ -f "$_KGT_HOME/share/fio-fio-3.3.tar.bz2" ]; then
       tar jxvf $_KGT_HOME/share/fio-fio-3.3.tar.bz2 -C /tmp
       cd /tmp/fio-fio-3.3
       ./configure --prefix=$share_dir/fio
       make
       make install
       cd -
       rm -fr /tmp/fio-fio-3.3
   fi
}

build_blas() {
   local share_dir
   share_dir=$1
   if [ -f "$_KGT_HOME/share/blas-3.8.0.tar.bz2" ]; then
       tar jxvf $_KGT_HOME/share/blas-3.8.0.tar.bz2 -C /tmp
       cd /tmp/BLAS-3.8.0
       make
       mkdir -p $share_dir/blas
       cp -a *.a *.so $share_dir/blas 2>/dev/null
       (cd $share_dir/blas && ln -s blas_LINUX.a libblas.a)
       cd -
       rm -fr /tmp/BLAS-3.8.0
   fi
}

build_hpl() {
   local share_dir
   share_dir=$1
   env_file=$2
   if [ -f "$_KGT_HOME/share/hpl-2.2.tar.bz2" ]; then
       tar jxvf $_KGT_HOME/share/hpl-2.2.tar.bz2 -C /tmp
       cd /tmp/hpl-2.2
       env ${env_file}
       export BLAS_HOME=$share_dir/blas
       cp -a $_KGT_HOME/share/Make.${env_file}_gcc.hpl Make.${env_file}_gcc
       make arch=${env_file}_gcc
       mkdir -p $share_dir/hpl
       cp -a bin/mpich_gcc $share_dir/hpl
       cd -
       rm -fr /tmp/hpl-2.2
   fi
}

build_ctcs() {
   echo
}

build_memtest() {
   echo
}

build_mpich() {
   local share_dir
   share_dir=$1
   if [ -f "$_KGT_HOME/share/mpich-3.2.1.tar.bz2" ]; then
       tar jxvf $_KGT_HOME/share/mpich-3.2.1.tar.bz2 -C /tmp
       cd /tmp/mpich-3.2.1
       ./configure --prefix=$share_dir/mpich --disable-fast MPICHLIB_CFLAGS=-O3 MPICHLIB_FFLAGS=-O3 MPICHLIB_CXXFLAGS=-O3 MPICHLIB_FCFLAGS=-O3
       make -j 4
       make install
       cd -
       rm -fr /tmp/mpich-3.2.1
   fi
}

build_mvapich() {
   local share_dir
   share_dir=$1
   if [ -f "$_KGT_HOME/share/mvapich2-2.2.tar.bz2" ]; then
       tar jxvf $_KGT_HOME/share/mvapich2-2.2.tar.bz2 -C /tmp
       cd /tmp/mvapich2-2.2
       ./configure --prefix=$share_dir/mvapich
       make -j 4
       make install
       cd -
       rm -fr /tmp/mvapich2-2.2
   fi
}

build_stress() {
   local share_dir
   share_dir=$1
   if [ -f "$_KGT_HOME/share/stress-1.0.4.tar.bz2" ]; then
       tar jxvf $_KGT_HOME/share/stress-1.0.4.tar.bz2 -C /tmp
       cd /tmp/stress-1.0.4
       ./configure --prefix=$share_dir/stress
       make
       make install
       cd -
       rm -fr /tmp/stress-1.0.4
   fi
}

build_stress_ng() {
   local share_dir
   share_dir=$1
   if [ -f "$_KGT_HOME/share/stress-ng-0.09.15.tar.xz" ]; then
       tar Jxvf $_KGT_HOME/share/stress-ng-0.09.15.tar.xz -C /tmp
       cd /tmp/stress-ng-0.09.15
       make
       mkdir -p $share_dir/stress_ng
       cp -a stress-ng $share_dir/stress_ng
       cd -
       rm -fr /tmp/stress-ng-0.09.15
   fi
}


setup() {
    _k_root
    share_dir_base=$(_k_opt -s 1 0 "$@")
    [ -n "$share_dir_base" ] || share_dir_base=/global
    echo "export PATH=\${PATH}:$_KGT_HOME/bin" > /etc/profile.d/kgt.sh
    echo "Please run \"source /etc/profile.d/kgt.sh\""
    share_dir=$share_dir_base/kgt
    [ -d $share_dir ] || mkdir -p $share_dir
    pre_req 
    build_pip
    build_pip_modules cx_Freeze
    [ -d $share_dir/modules ] || build_module $share_dir
    [ -d $share_dir/fio ] || build_fio $share_dir
    [ -d $share_dir/mpich ] || build_mpich $share_dir
    [ -d $share_dir/mvapich ] || build_mvapich $share_dir
    [ -d $share_dir/blas ] || build_blas $share_dir
    [ -d $share_dir/hpl/mpich_gcc ] || build_hpl $share_dir mpich
    [ -d $share_dir/hpl/mvapich_gcc ] || build_hpl $share_dir mvapich
    [ -d $share_dir/hpl/stress ] || build_stress $share_dir
    [ -d $share_dir/hpl/stress_ng ] || build_stress_ng $share_dir
}
